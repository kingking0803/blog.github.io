[{"title":"CAS单点登录","url":"%2Fblog.github.io%2F2018%2F04%2F05%2Fcas%2F","content":"## 环境\n1、Tomcat8\n2、JDK8\n3、CAS Server：4.0.0（这个版本较老，可以用新的版本）\n4、CAS Client：3.1.10（用maven引入）\n5、Spring Boot项目\n\n## 创建证书\n1、用jdk自带的keytool生成证书：\n>命令：keytool -genkey -alias wsria -keyalg RSA -keystore d:/keys/wsriakey\n\n在输入完密码后提示输入域名是我输入的是 sso.wsria.com，其实这个域名是不存在的，但是我为了演示所以虚拟了这个域名，技巧在于修改C:\\Windows\\System32\\drivers\\etc\\hosts，添加内容如下：\n\n127.0.0.1 sso.wsria.com\n\n这样在访问sso.wsria.com的时候其实是访问的127.0.0.1也就是本机\n\n**严重提醒**：提示输入域名的时候**不能**输入**IP地址**\n\n## 导出证书\n>命令：D:\\keys>keytool -export -file d:/keys/wsria.crt -alias wsria -keystore d:/keys/wsriakey\n\n## 为客户端的JVM导入证书\n\n>命令：keytool -import -keystore D:\\tools\\jdk\\1.6\\jdk1.6.0_20\\jre\\lib\\security\\cacerts -file D:/keys/wsria.crt -alias wsria\n\n**特别说明**:输入的keystore密码并不是刚才设置的证书密码，是默认密码changeit\n\n## 应用证书到Web服务器-Tomcat\n\n打开tomcat目录的conf/server.xml文件，开启如下注释，并设置keystoreFile、keystorePass修改结果如下：\n> &lt;Connector port=\"8443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\"  maxThreads=\"150\" scheme=\"https\" secure=\"true\"  clientAuth=\"false\" sslProtocol=\"TLS\"  keystoreFile=\"D:/keys/wsriakey\" keystorePass=\"wsria.com\"  />\n\n参数说明：\n\n*   keystoreFile：在第一步创建的key存放位置\n*   keystorePass：创建证书时的密码\n\n好了，到此Tomcat的SSL启用完成，现在你可以启动tomcat试一下了，例如本教程输入地址：https://sso.wsria.com:8443/\n默认的登录账号为casuser密码为Mellon\n\n## 为CAS服务器设置数据库连接登录\n\n在CAS服务项目中的deployerConfigContext.xml中找id为primaryAuthenticationHandler的bean，将这个bean替换\n>&lt;bean id=\"primaryAuthenticationHandler\" class=\"org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationWithSaltHandler\">  \n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=\"dataSource\" ref=\"dataSource\" />  \n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=\"sql\" value=\"select password from sys_user where username=?\" />  \n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=\"passwordSaltEncoder\" ref=\"MD5PasswordEncoder\"/>  \n&lt;/bean>\n\n配置对应的数据库连接和密码校验类\n>&lt;bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">  \n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=\"driverClassName\">&lt;value>com.mysql.jdbc.Driver&lt;/value>&lt;/property>  \n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=\"url\">&lt;value>jdbc:mysql://localhost:3306/lenos&lt;/value>&lt;/property>  \n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=\"username\">&lt;value>root&lt;/value>&lt;/property>  \n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=\"password\">&lt;value>asdf1234&lt;/value>&lt;/property>  \n&lt;/bean>     \n&lt;bean id=\"MD5PasswordEncoder\" class=\"org.jasig.cas.authentication.handler.CustomPasswordEncoder\">    \n&lt;/bean>\n\n其中CustomPasswordEncoder为自定义加密类，QueryDatabaseAuthenticationWithSaltHandler也是自定义的类，\n因为客户端系统的密码校验功能可能和CAS默认校验方式不同\n\n## 为客户端系统依赖CAS\n\nmaven加入如下依赖\n>&lt;dependency>\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId>org.jasig.cas&lt;/groupId>\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version>3.1.10&lt;/version>\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId>cas-client-core&lt;/artifactId>\n&lt;/dependency>\n\napplication.yml配置信息\n>spring:\n&nbsp;&nbsp;cas:\n&nbsp;&nbsp;&nbsp;&nbsp;sign-out-filters: /logout\n&nbsp;&nbsp;&nbsp;&nbsp;auth-filters: /*\n&nbsp;&nbsp;&nbsp;&nbsp;validate-filters: /*\n&nbsp;&nbsp;&nbsp;&nbsp;request-wrapper-filters: /*\n&nbsp;&nbsp;&nbsp;&nbsp;assertion-filters: /*\n&nbsp;&nbsp;&nbsp;&nbsp;cas-server-login-url: https://sso.wsria.com:8443/cas/login\n&nbsp;&nbsp;&nbsp;&nbsp;cas-server-url-prefix: https://sso.wsria.com:8443/cas\n&nbsp;&nbsp;&nbsp;&nbsp;redirect-after-validation: true\n&nbsp;&nbsp;&nbsp;&nbsp;use-session: true\n&nbsp;&nbsp;&nbsp;&nbsp;server-name: http://localhost:8087/receive\n\nSpringCasAutoConfig.java用于获取配置信息\n>@Component\n@ConfigurationProperties(prefix = \"spring.cas\")\npublic class SpringCasAutoConfig {\n&nbsp;&nbsp;&nbsp;&nbsp;static final String separator = \",\";\n&nbsp;&nbsp;&nbsp;&nbsp;private String validateFilters;\n&nbsp;&nbsp;&nbsp;&nbsp;private String signOutFilters;\n&nbsp;&nbsp;&nbsp;&nbsp;private String authFilters;\n&nbsp;&nbsp;&nbsp;&nbsp;private String assertionFilters;\n&nbsp;&nbsp;&nbsp;&nbsp;private String requestWrapperFilters;\n&nbsp;&nbsp;&nbsp;&nbsp;private String casServerUrlPrefix;\n&nbsp;&nbsp;&nbsp;&nbsp;private String casServerLoginUrl;\n&nbsp;&nbsp;&nbsp;&nbsp;private String serverName;\n&nbsp;&nbsp;&nbsp;&nbsp;private boolean useSession = true;\n&nbsp;&nbsp;&nbsp;&nbsp;private boolean redirectAfterValidation = true;\n&nbsp;&nbsp;&nbsp;&nbsp;public List<String> getValidateFilters() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Arrays.asList(validateFilters.split(separator));\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public void setValidateFilters(String validateFilters) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.validateFilters = validateFilters;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public List<String> getSignOutFilters() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Arrays.asList(signOutFilters.split(separator));\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public void setSignOutFilters(String signOutFilters) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.signOutFilters = signOutFilters;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public List<String> getAuthFilters() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Arrays.asList(authFilters.split(separator));\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public void setAuthFilters(String authFilters) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.authFilters = authFilters;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public List<String> getAssertionFilters() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Arrays.asList(assertionFilters.split(separator));\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public void setAssertionFilters(String assertionFilters) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.assertionFilters = assertionFilters;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public List<String> getRequestWrapperFilters() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Arrays.asList(requestWrapperFilters.split(separator));\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public void setRequestWrapperFilters(String requestWrapperFilters) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.requestWrapperFilters = requestWrapperFilters;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public String getCasServerUrlPrefix() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return casServerUrlPrefix;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public void setCasServerUrlPrefix(String casServerUrlPrefix) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.casServerUrlPrefix = casServerUrlPrefix;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public String getCasServerLoginUrl() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return casServerLoginUrl;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public void setCasServerLoginUrl(String casServerLoginUrl) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.casServerLoginUrl = casServerLoginUrl;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public String getServerName() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return serverName;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public void setServerName(String serverName) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.serverName = serverName;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public boolean isRedirectAfterValidation() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return redirectAfterValidation;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public void setRedirectAfterValidation(boolean redirectAfterValidation) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.redirectAfterValidation = redirectAfterValidation;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public boolean isUseSession() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return useSession;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;public void setUseSession(boolean useSession) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.useSession = useSession;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\n整合shiro和cas：\nShiroCasConfiguration.java\n>@Configuration\npublic class ShiroCasConfiguration {\n&nbsp;&nbsp;&nbsp;&nbsp;private static final Logger logger = LoggerFactory.getLogger(ShiroCasConfiguration.class);\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\n&nbsp;&nbsp;&nbsp;&nbsp;private SpringCasAutoConfig springCasAutoConfig;\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\n&nbsp;&nbsp;&nbsp;&nbsp;private MyProperties myProperties;\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\n&nbsp;&nbsp;&nbsp;&nbsp;public EhCacheManager getEhCacheManager() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EhCacheManager em = new EhCacheManager();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;em.setCacheManagerConfigFile(\"classpath:ehcache-shiro.xml\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return em;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name = \"myShiroCasRealm\")\n&nbsp;&nbsp;&nbsp;&nbsp;public MyShiroCasRealm myShiroCasRealm(EhCacheManager cacheManager) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyShiroCasRealm realm = new MyShiroCasRealm();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;realm.setCacheManager(cacheManager);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return realm;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;/** 注册单点登出listener**/\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\n&nbsp;&nbsp;&nbsp;&nbsp;public ServletListenerRegistrationBean<SingleSignOutHttpSessionListener> singleSignOutHttpSessionListener() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServletListenerRegistrationBean<SingleSignOutHttpSessionListener> listener = new ServletListenerRegistrationBean<SingleSignOutHttpSessionListener>();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listener.setEnabled(true);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listener.setListener(new SingleSignOutHttpSessionListener());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return listener;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;/**注册单点登出filter **/\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\n&nbsp;&nbsp;&nbsp;&nbsp;public FilterRegistrationBean logOutFilter() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilterRegistrationBean filterRegistration = new FilterRegistrationBean();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LogoutFilter logoutFilter = new LogoutFilter(springCasAutoConfig.getCasServerUrlPrefix() + \"/logout?service=\" + springCasAutoConfig.getServerName(), new SecurityContextLogoutHandler());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.setFilter(logoutFilter);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.setEnabled(true);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.addUrlPatterns(\"/logout\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.addInitParameter(\"casServerUrlPrefix\", springCasAutoConfig.getCasServerUrlPrefix());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.addInitParameter(\"serverName\", springCasAutoConfig.getServerName());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return filterRegistration;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;/**注册DelegatingFilterProxy（Shiro）**/  \n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\n&nbsp;&nbsp;&nbsp;&nbsp;public FilterRegistrationBean delegatingFilterProxy() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilterRegistrationBean filterRegistration = new FilterRegistrationBean();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.setFilter(new DelegatingFilterProxy(\"shiroFilter\"));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.addInitParameter(\"targetFilterLifecycle\", \"true\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.setEnabled(true);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.addUrlPatterns(\"/*\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return filterRegistration;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name = \"lifecycleBeanPostProcessor\")\n&nbsp;&nbsp;&nbsp;&nbsp;public static LifecycleBeanPostProcessor getLifecycleBeanPostProcessor() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new LifecycleBeanPostProcessor();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\n  public DefaultAdvisorAutoProxyCreator getDefaultAdvisorAutoProxyCreator() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DefaultAdvisorAutoProxyCreator daap = new DefaultAdvisorAutoProxyCreator();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;daap.setProxyTargetClass(true);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return daap;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name = \"securityManager\")\n&nbsp;&nbsp;&nbsp;&nbsp;public DefaultWebSecurityManager getDefaultWebSecurityManager(MyShiroCasRealm myShiroCasRealm) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DefaultWebSecurityManager dwsm = new DefaultWebSecurityManager();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dwsm.setRealm(myShiroCasRealm);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dwsm.setCacheManager(getEhCacheManager());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dwsm.setSubjectFactory(new CasSubjectFactory());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dwsm;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean\n&nbsp;&nbsp;&nbsp;&nbsp;public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultWebSecurityManager securityManager) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aasa.setSecurityManager(securityManager);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return aasa;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;/**CAS过滤器 **/ \n&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name = \"casFilter\")\n&nbsp;&nbsp;&nbsp;&nbsp;public CasFilter getCasFilter() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CasFilter casFilter = new CasFilter();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;casFilter.setName(\"casFilter\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;casFilter.setEnabled(true);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 登录失败后跳转的URL，也就是 Shiro 执行 CasRealm 的 doGetAuthenticationInfo 方法向CasServer验证ticket\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;casFilter.setFailureUrl(springCasAutoConfig.getCasServerLoginUrl() + \"?service=\" + springCasAutoConfig.getServerName() + \"/cas\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return casFilter;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;/**ShiroFilter<br/>  **/\n&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name = \"shiroFilter\")\n&nbsp;&nbsp;&nbsp;&nbsp;public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager securityManager, CasFilter casFilter) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 必须设置 SecurityManager\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setSecurityManager(securityManager);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 如果不设置默认会自动寻找Web工程根目录下的\"/login.jsp\"页面\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setLoginUrl(springCasAutoConfig.getCasServerLoginUrl() + \"?service=\" + springCasAutoConfig.getServerName() + \"/cas\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 登录成功后要跳转的连接\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setSuccessUrl(\"/index\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setUnauthorizedUrl(\"/goLogin\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 添加casFilter到shiroFilter中\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map<String, Filter> filters = new HashMap<String, Filter>();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filters.put(\"casFilter\", casFilter);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setFilters(filters);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadShiroFilterChain(shiroFilterFactoryBean);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return shiroFilterFactoryBean;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;/**加载shiroFilter权限控制规则（从数据库读取然后配置）,角色/权限信息由MyShiroCasRealm对象提供doGetAuthorizationInfo实现获取来的 **/\n&nbsp;&nbsp;&nbsp;&nbsp;private void loadShiroFilterChain(ShiroFilterFactoryBean shiroFilterFactoryBean) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map<String, String> filterChainDefinitionMap = myProperties.getFilterChainDefinitionManager();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\nMyShiroCasRealm.java\n>public class MyShiroCasRealm extends CasRealm {\n&nbsp;&nbsp;&nbsp;&nbsp;private static final Logger logger = LoggerFactory.getLogger(MyShiroCasRealm.class);\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\n&nbsp;&nbsp;&nbsp;&nbsp;private SysUserService userService;\n&nbsp;&nbsp;&nbsp;&nbsp;@Autowired\n&nbsp;&nbsp;&nbsp;&nbsp;private SpringCasAutoConfig springCasAutoConfig;\n&nbsp;&nbsp;&nbsp;&nbsp;@PostConstruct\n&nbsp;&nbsp;&nbsp;&nbsp;public void initProperty() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setCasServerUrlPrefix(springCasAutoConfig.getCasServerUrlPrefix());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setCasService(springCasAutoConfig.getServerName() + \"/cas\");\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;/**权限认证，为当前登录的Subject授予角色和权限 **/\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\n&nbsp;&nbsp;&nbsp;&nbsp;protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(\"##################执行Shiro权限认证##################\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String loginName = (String) super.getAvailablePrincipal(principalCollection);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//到数据库查是否有此对象(1.本地查询 2.可以远程查询casserver 3.可以由casserver带过来角色／权限其它信息)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SysUser s = userService.login(loginName);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s != null) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentUser currentUser = (CurrentUser) ShiroUtil.getSession().getAttribute(\"curentUser\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (CurrentRole cRole : currentUser.getCurrentRoleList()) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info.addRole(cRole.getId());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (CurrentMenu cMenu : currentUser.getCurrentMenuList()) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!StringUtils.isEmpty(cMenu.getPermission())) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info.addStringPermission(cMenu.getPermission());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return info;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 返回null的话，就会导致任何用户访问被拦截的请求时，都会自动跳转到unauthorizedUrl指定的地址\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\n\n## 可能出现的问题\n编译环境：\nmaven3.2.1\njdk6\n使用mvn clean package -Dmaven.test.skip=true -Dcheckstyle.skip对项目进行编译。我在编译cas-server-core的时候出现过如下错误：\n1、 **[ERROR] Failed to execute goal com.mycila.maven-license-plugin:maven-license-plugin:1.9.0:check (default) on project cas-server: Resource C:\\xxx\\cas-server-4.0.0/src/licensing/header.txt not found in file system, classpath or URL: unknown protocol: c -> [Help 1]**\n解决方法：[cas导入maven缺少head.txt文件（ 密码: a4ag）](https://pan.baidu.com/s/1f9ee9zR30HhUTyxMFltZ3g)\n\n2、**Failed to execute goal com.mycila:license-maven-plugin:3.0:check (default) on project xxx: Some files do not have the expected license header -> [Help 1]**\n解决方法：输入命令mvn license:format\n\n\n\n\n"},{"title":"Dubbo分布式服务框架解析","url":"%2Fblog.github.io%2F2018%2F03%2F27%2Fdubbo%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%2F","content":"# 背景\nDubbo是Alibaba开源的分布式服务架构，它的框架以分层的方式进行架构，分为十层，各层均为单向依赖，分别是service服务层、config配置层、proxy服务代理层、registry注册中心层、cluster路由层、monitor监控层、protocol远程调用层、exchange信息交换层、transport网络传输层、serialize序列化层。整个服务模型可以简化为两大块，服务提供方（Provider）和服务消费方（Consumer）。\n\n# 架构\n\n![jg](/blog.github.io/img/jg.png)\n\n| 节点 | 角色说明 |\n|---|---|\n| Registry | 服务注册与发现的注册中心 |\n| Provider | 服务的提供方 |\n| Consumer | 服务的消费方 |\n| Monitor | 监控中心 |\n| Container | 运行容器 |\n\n## 调用关系\n运行服务容器，启动服务提供方\n服务提供方向注册中心注册服务\n启动服务消费方，向服务中心注册服务，并获取服务提供方列表\n服务提供方和消费方每分钟向监控中心发送服务调用次数和调用时间，监控中心进行统计\n\n## 特性\n连通性\n>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小\n监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示\n服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销\n服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销\n注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外\n注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者\n注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表\n注册中心和监控中心都是可选的，服务消费者可以直连服务提供者\n\n健状性\n>监控中心宕掉不影响使用，只是丢失部分采样数据\n数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务\n注册中心对等集群，任意一台宕掉后，将自动切换到另一台\n注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯\n服务提供者无状态，任意一台宕掉后，不影响使用\n服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复\n\n伸缩性\n>注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心\n服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者\n\n升级性\n>当服务集群规模进一步扩大，带动IT治理结构进一步升级，需要实现动态部署，进行流动计算，现有分布式服务架构不会带来阻力\n\n# 搭建dubbo框架\n## 注册中心\nZookeeper是 Apacahe Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，并推荐使用\n\n![zookeeper_tree](/blog.github.io/img/zookeeper_tree.png)\n\n### zookeeper支持以下功能\n当提供者出现断电等异常停机时，注册中心能自动删除提供者信息\n当注册中心重启时，能自动恢复注册数据，以及订阅请求\n当会话过期时，能自动恢复注册数据，以及订阅请求\n当设置 <dubbo:registry check=\"false\" /> 时，记录失败注册和订阅请求，后台定时重试\n可通过 <dubbo:registry username=\"admin\" password=\"1234\" /> 设置 zookeeper 登录信息\n可通过 <dubbo:registry group=\"dubbo\" /> 设置 zookeeper 的根节点，不设置将使用无根树\n支持 \\* 号通配符 ，可订阅服务的所有分组和所有版本的提供者\n\n## 服务提供方和消费方\n### 配置\n一般的web项目本地配置：\n\n![local](/blog.github.io/img/local.png)\n\ndubbo项目配置：\nprovider\n![remote_provider](/blog.github.io/img/remote_provider.png)\nconsumer\n![remote_consumer](/blog.github.io/img/remote_consumer.png)\n\n### Schema配置\n\n| schema | 说明 |\n|---|---|\n| dubbo:service | 服务提供者暴露服务配置 |\n| dubbo:reference | 服务消费者引用服务配置 |\n| dubbo:registry | 注册中心配置 |\n| dubbo:protocol | 服务提供者协议配置 |\n| dubbo:application | 服务消费者引用服务配置 |\n\n## 扩展实现\n\n例如要实现自定义的拦截器\n>扩展接口\ncom.alibaba.dubbo.rpc.Filter\n扩展配置\nMETA-INF/dubbo/com.alibaba.dubbo.rpc.Filter：\nxxx=com.xxx.XxxFilter\n调用自定义过滤器\n<dubbo:consumer filter=”xxx”/>\n\n## dobbo-admin\ndubbo-admin是服务管理平台，即对注册中心的服务进行管理，因此在启动dubbo-admin之前必须启动注册中心\n\n### 安装及运行\n1、下载dubbo-admin源码：[dubbo-admin](https://github.com/apache/incubator-dubbo-ops)\n\n2、到该目录下执行mvn clean package，进行编译\n\n3、将war包进行解压：jar xvf\n\n4、将文件夹拷贝到tomcat下运行\n\n5、成功后可看见如下界面\n\n![dubbo_admin](/blog.github.io/img/dubbo_admin.png)\n"},{"title":"Hello, Hexo","url":"%2Fblog.github.io%2F2018%2F03%2F26%2FHello-Hexo%2F","content":"欢迎使用hexo！"}]