[{"title":"Dubbo分布式服务框架解析","url":"%2Fblog.github.io%2F2018%2F03%2F27%2Fdubbo%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%2F","content":"# 背景\nDubbo是Alibaba开源的分布式服务架构，它的框架以分层的方式进行架构，分为十层，各层均为单向依赖，分别是service服务层、config配置层、proxy服务代理层、registry注册中心层、cluster路由层、monitor监控层、protocol远程调用层、exchange信息交换层、transport网络传输层、serialize序列化层。整个服务模型可以简化为两大块，服务提供方（Provider）和服务消费方（Consumer）。\n\n# 架构\n\n![jg](/blog.github.io/img/jg.png)\n\n| 节点 | 角色说明 |\n|---|---|\n| Registry | 服务注册与发现的注册中心 |\n| Provider | 服务的提供方 |\n| Consumer | 服务的消费方 |\n| Monitor | 监控中心 |\n| Container | 运行容器 |\n\n## 调用关系\n运行服务容器，启动服务提供方\n服务提供方向注册中心注册服务\n启动服务消费方，向服务中心注册服务，并获取服务提供方列表\n服务提供方和消费方每分钟向监控中心发送服务调用次数和调用时间，监控中心进行统计\n\n## 特性\n连通性\n>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小\n监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示\n服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销\n服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销\n注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外\n注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者\n注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表\n注册中心和监控中心都是可选的，服务消费者可以直连服务提供者\n\n健状性\n>监控中心宕掉不影响使用，只是丢失部分采样数据\n数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务\n注册中心对等集群，任意一台宕掉后，将自动切换到另一台\n注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯\n服务提供者无状态，任意一台宕掉后，不影响使用\n服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复\n\n伸缩性\n>注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心\n服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者\n\n升级性\n>当服务集群规模进一步扩大，带动IT治理结构进一步升级，需要实现动态部署，进行流动计算，现有分布式服务架构不会带来阻力\n\n# 搭建dubbo框架\n## 注册中心\nZookeeper是 Apacahe Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，并推荐使用\n\n![zookeeper_tree](/blog.github.io/img/zookeeper_tree.png)\n\n### zookeeper支持以下功能\n当提供者出现断电等异常停机时，注册中心能自动删除提供者信息\n当注册中心重启时，能自动恢复注册数据，以及订阅请求\n当会话过期时，能自动恢复注册数据，以及订阅请求\n当设置 <dubbo:registry check=\"false\" /> 时，记录失败注册和订阅请求，后台定时重试\n可通过 <dubbo:registry username=\"admin\" password=\"1234\" /> 设置 zookeeper 登录信息\n可通过 <dubbo:registry group=\"dubbo\" /> 设置 zookeeper 的根节点，不设置将使用无根树\n支持 \\* 号通配符 ，可订阅服务的所有分组和所有版本的提供者\n\n## 服务提供方和消费方\n### 配置\n一般的web项目本地配置：\n\n![local](/blog.github.io/img/local.png)\n\ndubbo项目配置：\nprovider\n![remote_provider](/blog.github.io/img/remote_provider.png)\nconsumer\n![remote_consumer](/blog.github.io/img/remote_consumer.png)\n\n### Schema配置\n\n| schema | 说明 |\n|---|---|\n| dubbo:service | 服务提供者暴露服务配置 |\n| dubbo:reference | 服务消费者引用服务配置 |\n| dubbo:registry | 注册中心配置 |\n| dubbo:protocol | 服务提供者协议配置 |\n| dubbo:application | 服务消费者引用服务配置 |\n\n## 扩展实现\n\n例如要实现自定义的拦截器\n>扩展接口\ncom.alibaba.dubbo.rpc.Filter\n扩展配置\nMETA-INF/dubbo/com.alibaba.dubbo.rpc.Filter：\nxxx=com.xxx.XxxFilter\n调用自定义过滤器\n<dubbo:consumer filter=”xxx”/>\n\n## dobbo-admin\ndubbo-admin是服务管理平台，即对注册中心的服务进行管理，因此在启动dubbo-admin之前必须启动注册中心\n\n### 安装及运行\n1、下载dubbo-admin源码：[dubbo-admin](https://github.com/apache/incubator-dubbo-ops)\n\n2、到该目录下执行mvn clean package，进行编译\n\n3、将war包进行解压：jar xvf\n\n4、将文件夹拷贝到tomcat下运行\n\n5、成功后可看见如下界面\n\n![dubbo_admin](/blog.github.io/img/dubbo_admin.png)\n"},{"title":"Hello, Hexo","url":"%2Fblog.github.io%2F2018%2F03%2F26%2FHello-Hexo%2F","content":"欢迎使用hexo！"}]