<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kingking&#39;s blog</title>
  
  
  <link href="/blog.github.io/atom.xml" rel="self"/>
  
  <link href="https://kingking0803.github.io/"/>
  <updated>2018-04-10T06:09:15.204Z</updated>
  <id>https://kingking0803.github.io/</id>
  
  <author>
    <name>kingking</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CAS单点登录</title>
    <link href="https://kingking0803.github.io/2018/04/05/cas/"/>
    <id>https://kingking0803.github.io/2018/04/05/cas/</id>
    <published>2018-04-05T05:18:09.000Z</published>
    <updated>2018-04-10T06:09:15.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>1、Tomcat8<br>2、JDK8<br>3、CAS Server：4.0.0（这个版本较老，可以用新的版本）<br>4、CAS Client：3.1.10（用maven引入）<br>5、Spring Boot项目</p><h2 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h2><p>1、用jdk自带的keytool生成证书：</p><blockquote><p>命令：keytool -genkey -alias wsria -keyalg RSA -keystore d:/keys/wsriakey</p></blockquote><p>在输入完密码后提示输入域名是我输入的是 sso.wsria.com，其实这个域名是不存在的，但是我为了演示所以虚拟了这个域名，技巧在于修改C:\Windows\System32\drivers\etc\hosts，添加内容如下：</p><p>127.0.0.1 sso.wsria.com</p><p>这样在访问sso.wsria.com的时候其实是访问的127.0.0.1也就是本机</p><p><strong>严重提醒</strong>：提示输入域名的时候<strong>不能</strong>输入<strong>IP地址</strong></p><h2 id="导出证书"><a href="#导出证书" class="headerlink" title="导出证书"></a>导出证书</h2><blockquote><p>命令：D:\keys&gt;keytool -export -file d:/keys/wsria.crt -alias wsria -keystore d:/keys/wsriakey</p></blockquote><h2 id="为客户端的JVM导入证书"><a href="#为客户端的JVM导入证书" class="headerlink" title="为客户端的JVM导入证书"></a>为客户端的JVM导入证书</h2><blockquote><p>命令：keytool -import -keystore D:\tools\jdk\1.6\jdk1.6.0_20\jre\lib\security\cacerts -file D:/keys/wsria.crt -alias wsria</p></blockquote><p><strong>特别说明</strong>:输入的keystore密码并不是刚才设置的证书密码，是默认密码changeit</p><h2 id="应用证书到Web服务器-Tomcat"><a href="#应用证书到Web服务器-Tomcat" class="headerlink" title="应用证书到Web服务器-Tomcat"></a>应用证书到Web服务器-Tomcat</h2><p>打开tomcat目录的conf/server.xml文件，开启如下注释，并设置keystoreFile、keystorePass修改结果如下：</p><blockquote><p>&lt;Connector port=”8443” protocol=”HTTP/1.1” SSLEnabled=”true”  maxThreads=”150” scheme=”https” secure=”true”  clientAuth=”false” sslProtocol=”TLS”  keystoreFile=”D:/keys/wsriakey” keystorePass=”wsria.com”  /&gt;</p></blockquote><p>参数说明：</p><ul><li>keystoreFile：在第一步创建的key存放位置</li><li>keystorePass：创建证书时的密码</li></ul><p>好了，到此Tomcat的SSL启用完成，现在你可以启动tomcat试一下了，例如本教程输入地址：<a href="https://sso.wsria.com:8443/" target="_blank" rel="noopener">https://sso.wsria.com:8443/</a><br>默认的登录账号为casuser密码为Mellon</p><h2 id="为CAS服务器设置数据库连接登录"><a href="#为CAS服务器设置数据库连接登录" class="headerlink" title="为CAS服务器设置数据库连接登录"></a>为CAS服务器设置数据库连接登录</h2><p>在CAS服务项目中的deployerConfigContext.xml中找id为primaryAuthenticationHandler的bean，将这个bean替换</p><blockquote><p>&lt;bean id=”primaryAuthenticationHandler” class=”org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationWithSaltHandler”&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=”dataSource” ref=”dataSource” /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=”sql” value=”select password from sys_user where username=?” /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=”passwordSaltEncoder” ref=”MD5PasswordEncoder”/&gt;<br>&lt;/bean&gt;</p></blockquote><p>配置对应的数据库连接和密码校验类</p><blockquote><p>&lt;bean id=”dataSource” class=”org.springframework.jdbc.datasource.DriverManagerDataSource”&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=”driverClassName”&gt;&lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;&lt;/property&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=”url”&gt;&lt;value&gt;jdbc:mysql://localhost:3306/lenos&lt;/value&gt;&lt;/property&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=”username”&gt;&lt;value&gt;root&lt;/value&gt;&lt;/property&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=”password”&gt;&lt;value&gt;asdf1234&lt;/value&gt;&lt;/property&gt;<br>&lt;/bean&gt;<br>&lt;bean id=”MD5PasswordEncoder” class=”org.jasig.cas.authentication.handler.CustomPasswordEncoder”&gt;<br>&lt;/bean&gt;</p></blockquote><p>其中CustomPasswordEncoder为自定义加密类，QueryDatabaseAuthenticationWithSaltHandler也是自定义的类，<br>因为客户端系统的密码校验功能可能和CAS默认校验方式不同</p><h2 id="为客户端系统依赖CAS"><a href="#为客户端系统依赖CAS" class="headerlink" title="为客户端系统依赖CAS"></a>为客户端系统依赖CAS</h2><p>maven加入如下依赖</p><blockquote><p>&lt;dependency&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.jasig.cas&lt;/groupId&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;3.1.10&lt;/version&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;cas-client-core&lt;/artifactId&gt;<br>&lt;/dependency&gt;</p></blockquote><p>application.yml配置信息</p><blockquote><p>spring:<br>&nbsp;&nbsp;cas:<br>&nbsp;&nbsp;&nbsp;&nbsp;sign-out-filters: /logout<br>&nbsp;&nbsp;&nbsp;&nbsp;auth-filters: /<em><br>&nbsp;&nbsp;&nbsp;&nbsp;validate-filters: /</em><br>&nbsp;&nbsp;&nbsp;&nbsp;request-wrapper-filters: /<em><br>&nbsp;&nbsp;&nbsp;&nbsp;assertion-filters: /</em><br>&nbsp;&nbsp;&nbsp;&nbsp;cas-server-login-url: <a href="https://sso.wsria.com:8443/cas/login" target="_blank" rel="noopener">https://sso.wsria.com:8443/cas/login</a><br>&nbsp;&nbsp;&nbsp;&nbsp;cas-server-url-prefix: <a href="https://sso.wsria.com:8443/cas" target="_blank" rel="noopener">https://sso.wsria.com:8443/cas</a><br>&nbsp;&nbsp;&nbsp;&nbsp;redirect-after-validation: true<br>&nbsp;&nbsp;&nbsp;&nbsp;use-session: true<br>&nbsp;&nbsp;&nbsp;&nbsp;server-name: <a href="http://localhost:8087/receive" target="_blank" rel="noopener">http://localhost:8087/receive</a></p></blockquote><p>SpringCasAutoConfig.java用于获取配置信息</p><blockquote><p>@Component<br>@ConfigurationProperties(prefix = “spring.cas”)<br>public class SpringCasAutoConfig {<br>&nbsp;&nbsp;&nbsp;&nbsp;static final String separator = “,”;<br>&nbsp;&nbsp;&nbsp;&nbsp;private String validateFilters;<br>&nbsp;&nbsp;&nbsp;&nbsp;private String signOutFilters;<br>&nbsp;&nbsp;&nbsp;&nbsp;private String authFilters;<br>&nbsp;&nbsp;&nbsp;&nbsp;private String assertionFilters;<br>&nbsp;&nbsp;&nbsp;&nbsp;private String requestWrapperFilters;<br>&nbsp;&nbsp;&nbsp;&nbsp;private String casServerUrlPrefix;<br>&nbsp;&nbsp;&nbsp;&nbsp;private String casServerLoginUrl;<br>&nbsp;&nbsp;&nbsp;&nbsp;private String serverName;<br>&nbsp;&nbsp;&nbsp;&nbsp;private boolean useSession = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;private boolean redirectAfterValidation = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;public List<string> getValidateFilters() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Arrays.asList(validateFilters.split(separator));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public void setValidateFilters(String validateFilters) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.validateFilters = validateFilters;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public List<string> getSignOutFilters() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Arrays.asList(signOutFilters.split(separator));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public void setSignOutFilters(String signOutFilters) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.signOutFilters = signOutFilters;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public List<string> getAuthFilters() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Arrays.asList(authFilters.split(separator));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public void setAuthFilters(String authFilters) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.authFilters = authFilters;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public List<string> getAssertionFilters() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Arrays.asList(assertionFilters.split(separator));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public void setAssertionFilters(String assertionFilters) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.assertionFilters = assertionFilters;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public List<string> getRequestWrapperFilters() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Arrays.asList(requestWrapperFilters.split(separator));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public void setRequestWrapperFilters(String requestWrapperFilters) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.requestWrapperFilters = requestWrapperFilters;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String getCasServerUrlPrefix() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return casServerUrlPrefix;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public void setCasServerUrlPrefix(String casServerUrlPrefix) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.casServerUrlPrefix = casServerUrlPrefix;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String getCasServerLoginUrl() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return casServerLoginUrl;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public void setCasServerLoginUrl(String casServerLoginUrl) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.casServerLoginUrl = casServerLoginUrl;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public String getServerName() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return serverName;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public void setServerName(String serverName) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.serverName = serverName;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public boolean isRedirectAfterValidation() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return redirectAfterValidation;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public void setRedirectAfterValidation(boolean redirectAfterValidation) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.redirectAfterValidation = redirectAfterValidation;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public boolean isUseSession() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return useSession;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public void setUseSession(boolean useSession) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.useSession = useSession;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</string></string></string></string></string></p></blockquote><p>整合shiro和cas：<br>ShiroCasConfiguration.java</p><blockquote><p>@Configuration<br>public class ShiroCasConfiguration {<br>&nbsp;&nbsp;&nbsp;&nbsp;private static final Logger logger = LoggerFactory.getLogger(ShiroCasConfiguration.class);<br>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired<br>&nbsp;&nbsp;&nbsp;&nbsp;private SpringCasAutoConfig springCasAutoConfig;<br>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired<br>&nbsp;&nbsp;&nbsp;&nbsp;private MyProperties myProperties;<br>&nbsp;&nbsp;&nbsp;&nbsp;@Bean<br>&nbsp;&nbsp;&nbsp;&nbsp;public EhCacheManager getEhCacheManager() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EhCacheManager em = new EhCacheManager();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;em.setCacheManagerConfigFile(“classpath:ehcache-shiro.xml”);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return em;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name = “myShiroCasRealm”)<br>&nbsp;&nbsp;&nbsp;&nbsp;public MyShiroCasRealm myShiroCasRealm(EhCacheManager cacheManager) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyShiroCasRealm realm = new MyShiroCasRealm();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;realm.setCacheManager(cacheManager);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return realm;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/** 注册单点登出listener**/<br>&nbsp;&nbsp;&nbsp;&nbsp;@Bean<br>&nbsp;&nbsp;&nbsp;&nbsp;public ServletListenerRegistrationBean<singlesignouthttpsessionlistener> singleSignOutHttpSessionListener() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServletListenerRegistrationBean<singlesignouthttpsessionlistener> listener = new ServletListenerRegistrationBean<singlesignouthttpsessionlistener>();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listener.setEnabled(true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listener.setListener(new SingleSignOutHttpSessionListener());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return listener;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/**注册单点登出filter **/<br>&nbsp;&nbsp;&nbsp;&nbsp;@Bean<br>&nbsp;&nbsp;&nbsp;&nbsp;public FilterRegistrationBean logOutFilter() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilterRegistrationBean filterRegistration = new FilterRegistrationBean();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LogoutFilter logoutFilter = new LogoutFilter(springCasAutoConfig.getCasServerUrlPrefix() + “/logout?service=” + springCasAutoConfig.getServerName(), new SecurityContextLogoutHandler());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.setFilter(logoutFilter);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.setEnabled(true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.addUrlPatterns(“/logout”);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.addInitParameter(“casServerUrlPrefix”, springCasAutoConfig.getCasServerUrlPrefix());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.addInitParameter(“serverName”, springCasAutoConfig.getServerName());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return filterRegistration;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/**注册DelegatingFilterProxy（Shiro）**/<br>&nbsp;&nbsp;&nbsp;&nbsp;@Bean<br>&nbsp;&nbsp;&nbsp;&nbsp;public FilterRegistrationBean delegatingFilterProxy() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilterRegistrationBean filterRegistration = new FilterRegistrationBean();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.setFilter(new DelegatingFilterProxy(“shiroFilter”));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.addInitParameter(“targetFilterLifecycle”, “true”);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.setEnabled(true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegistration.addUrlPatterns(“/<em>“);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return filterRegistration;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name = “lifecycleBeanPostProcessor”)<br>&nbsp;&nbsp;&nbsp;&nbsp;public static LifecycleBeanPostProcessor getLifecycleBeanPostProcessor() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new LifecycleBeanPostProcessor();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;@Bean<br>  public DefaultAdvisorAutoProxyCreator getDefaultAdvisorAutoProxyCreator() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DefaultAdvisorAutoProxyCreator daap = new DefaultAdvisorAutoProxyCreator();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;daap.setProxyTargetClass(true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return daap;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name = “securityManager”)<br>&nbsp;&nbsp;&nbsp;&nbsp;public DefaultWebSecurityManager getDefaultWebSecurityManager(MyShiroCasRealm myShiroCasRealm) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DefaultWebSecurityManager dwsm = new DefaultWebSecurityManager();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dwsm.setRealm(myShiroCasRealm);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dwsm.setCacheManager(getEhCacheManager());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dwsm.setSubjectFactory(new CasSubjectFactory());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dwsm;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;@Bean<br>&nbsp;&nbsp;&nbsp;&nbsp;public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultWebSecurityManager securityManager) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aasa.setSecurityManager(securityManager);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return aasa;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/\</em>* CAS过滤器 **/<br>&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name = “casFilter”)<br>&nbsp;&nbsp;&nbsp;&nbsp;public CasFilter getCasFilter() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CasFilter casFilter = new CasFilter();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;casFilter.setName(“casFilter”);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;casFilter.setEnabled(true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 登录失败后跳转的URL，也就是 Shiro 执行 CasRealm 的 doGetAuthenticationInfo 方法向CasServer验证ticket<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;casFilter.setFailureUrl(springCasAutoConfig.getCasServerLoginUrl() + “?service=” + springCasAutoConfig.getServerName() + “/cas”);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return casFilter;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/** ShiroFilter<br>**/<br>&nbsp;&nbsp;&nbsp;&nbsp;@Bean(name = “shiroFilter”)<br>&nbsp;&nbsp;&nbsp;&nbsp;public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager securityManager, CasFilter casFilter) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 必须设置 SecurityManager<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setSecurityManager(securityManager);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 如果不设置默认会自动寻找Web工程根目录下的”/login.jsp”页面<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setLoginUrl(springCasAutoConfig.getCasServerLoginUrl() + “?service=” + springCasAutoConfig.getServerName() + “/cas”);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 登录成功后要跳转的连接<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setSuccessUrl(“/index”);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setUnauthorizedUrl(“/goLogin”);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 添加casFilter到shiroFilter中<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String, Filter&gt; filters = new HashMap&lt;String, Filter&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filters.put(“casFilter”, casFilter);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setFilters(filters);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadShiroFilterChain(shiroFilterFactoryBean);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return shiroFilterFactoryBean;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/**加载shiroFilter权限控制规则（从数据库读取然后配置）,角色/权限信息由MyShiroCasRealm对象提供doGetAuthorizationInfo实现获取来的 **/<br>&nbsp;&nbsp;&nbsp;&nbsp;private void loadShiroFilterChain(ShiroFilterFactoryBean shiroFilterFactoryBean) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String, String&gt; filterChainDefinitionMap = myProperties.getFilterChainDefinitionManager();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</singlesignouthttpsessionlistener></singlesignouthttpsessionlistener></singlesignouthttpsessionlistener></p></blockquote><p>MyShiroCasRealm.java</p><blockquote><p>public class MyShiroCasRealm extends CasRealm {<br>&nbsp;&nbsp;&nbsp;&nbsp;private static final Logger logger = LoggerFactory.getLogger(MyShiroCasRealm.class);<br>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired<br>&nbsp;&nbsp;&nbsp;&nbsp;private SysUserService userService;<br>&nbsp;&nbsp;&nbsp;&nbsp;@Autowired<br>&nbsp;&nbsp;&nbsp;&nbsp;private SpringCasAutoConfig springCasAutoConfig;<br>&nbsp;&nbsp;&nbsp;&nbsp;@PostConstruct<br>&nbsp;&nbsp;&nbsp;&nbsp;public void initProperty() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setCasServerUrlPrefix(springCasAutoConfig.getCasServerUrlPrefix());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setCasService(springCasAutoConfig.getServerName() + “/cas”);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/**权限认证，为当前登录的Subject授予角色和权限 **/<br>&nbsp;&nbsp;&nbsp;&nbsp;@Override<br>&nbsp;&nbsp;&nbsp;&nbsp;protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(“##################执行Shiro权限认证##################”);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String loginName = (String) super.getAvailablePrincipal(principalCollection);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//到数据库查是否有此对象(1.本地查询 2.可以远程查询casserver 3.可以由casserver带过来角色／权限其它信息)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SysUser s = userService.login(loginName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s != null) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CurrentUser currentUser = (CurrentUser) ShiroUtil.getSession().getAttribute(“curentUser”);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (CurrentRole cRole : currentUser.getCurrentRoleList()) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info.addRole(cRole.getId());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (CurrentMenu cMenu : currentUser.getCurrentMenuList()) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!StringUtils.isEmpty(cMenu.getPermission())) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info.addStringPermission(cMenu.getPermission());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return info;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 返回null的话，就会导致任何用户访问被拦截的请求时，都会自动跳转到unauthorizedUrl指定的地址<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</p></blockquote><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>输入网址：<a href="http://localhost:8087/receive/login" target="_blank" rel="noopener">http://localhost:8087/receive/login</a> 跳转到cas服务器登录页<br><img src="/blog.github.io/img/cas_server_login.png" alt="cas_server_login"></p><p>输入账号密码，进入自系统主页<br><img src="/blog.github.io/img/system1_index.png" alt="system1_index"></p><p>输入第二个自系统网址：<a href="http://localhost:8086/preservation/login" target="_blank" rel="noopener">http://localhost:8086/preservation/login</a> 不用再登录直接进入主页<br><img src="/blog.github.io/img/system2_index.png" alt="system2_index"></p><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><p>编译环境：<br>maven3.2.1<br>jdk6<br>使用mvn clean package -Dmaven.test.skip=true -Dcheckstyle.skip对项目进行编译。我在编译cas-server-core的时候出现过如下错误：<br>1、 <strong>[ERROR] Failed to execute goal com.mycila.maven-license-plugin:maven-license-plugin:1.9.0:check (default) on project cas-server: Resource C:\xxx\cas-server-4.0.0/src/licensing/header.txt not found in file system, classpath or URL: unknown protocol: c -&gt; [Help 1]</strong><br>解决方法：<a href="https://pan.baidu.com/s/1f9ee9zR30HhUTyxMFltZ3g" target="_blank" rel="noopener">cas导入maven缺少head.txt文件（ 密码: a4ag）</a></p><p>2、<strong>Failed to execute goal com.mycila:license-maven-plugin:3.0:check (default) on project xxx: Some files do not have the expected license header -&gt; [Help 1]</strong><br>解决方法：输入命令mvn license:format</p>]]></content>
    
    <summary type="html">
    
      搭建CAS单点登录服务器（SSO）...
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dubbo分布式服务框架解析</title>
    <link href="https://kingking0803.github.io/2018/03/27/dubbo%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
    <id>https://kingking0803.github.io/2018/03/27/dubbo分布式服务框架/</id>
    <published>2018-03-27T08:49:44.000Z</published>
    <updated>2018-03-30T08:58:37.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Dubbo是Alibaba开源的分布式服务架构，它的框架以分层的方式进行架构，分为十层，各层均为单向依赖，分别是service服务层、config配置层、proxy服务代理层、registry注册中心层、cluster路由层、monitor监控层、protocol远程调用层、exchange信息交换层、transport网络传输层、serialize序列化层。整个服务模型可以简化为两大块，服务提供方（Provider）和服务消费方（Consumer）。</p><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><img src="/blog.github.io/img/jg.png" alt="jg"></p><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Provider</td><td>服务的提供方</td></tr><tr><td>Consumer</td><td>服务的消费方</td></tr><tr><td>Monitor</td><td>监控中心</td></tr><tr><td>Container</td><td>运行容器</td></tr></tbody></table><h2 id="调用关系"><a href="#调用关系" class="headerlink" title="调用关系"></a>调用关系</h2><p>运行服务容器，启动服务提供方<br>服务提供方向注册中心注册服务<br>启动服务消费方，向服务中心注册服务，并获取服务提供方列表<br>服务提供方和消费方每分钟向监控中心发送服务调用次数和调用时间，监控中心进行统计</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>连通性</p><blockquote><p>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小<br>监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示<br>服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销<br>服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销<br>注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外<br>注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者<br>注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表<br>注册中心和监控中心都是可选的，服务消费者可以直连服务提供者</p></blockquote><p>健状性</p><blockquote><p>监控中心宕掉不影响使用，只是丢失部分采样数据<br>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务<br>注册中心对等集群，任意一台宕掉后，将自动切换到另一台<br>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯<br>服务提供者无状态，任意一台宕掉后，不影响使用<br>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</p></blockquote><p>伸缩性</p><blockquote><p>注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心<br>服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者</p></blockquote><p>升级性</p><blockquote><p>当服务集群规模进一步扩大，带动IT治理结构进一步升级，需要实现动态部署，进行流动计算，现有分布式服务架构不会带来阻力</p></blockquote><h1 id="搭建dubbo框架"><a href="#搭建dubbo框架" class="headerlink" title="搭建dubbo框架"></a>搭建dubbo框架</h1><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>Zookeeper是 Apacahe Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，并推荐使用</p><p><img src="/blog.github.io/img/zookeeper_tree.png" alt="zookeeper_tree"></p><h3 id="zookeeper支持以下功能"><a href="#zookeeper支持以下功能" class="headerlink" title="zookeeper支持以下功能"></a>zookeeper支持以下功能</h3><p>当提供者出现断电等异常停机时，注册中心能自动删除提供者信息<br>当注册中心重启时，能自动恢复注册数据，以及订阅请求<br>当会话过期时，能自动恢复注册数据，以及订阅请求<br>当设置 &lt;dubbo:registry check=”false” /&gt; 时，记录失败注册和订阅请求，后台定时重试<br>可通过 &lt;dubbo:registry username=”admin” password=”1234” /&gt; 设置 zookeeper 登录信息<br>可通过 &lt;dubbo:registry group=”dubbo” /&gt; 设置 zookeeper 的根节点，不设置将使用无根树<br>支持 * 号通配符 ，可订阅服务的所有分组和所有版本的提供者</p><h2 id="服务提供方和消费方"><a href="#服务提供方和消费方" class="headerlink" title="服务提供方和消费方"></a>服务提供方和消费方</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>一般的web项目本地配置：</p><p><img src="/blog.github.io/img/local.png" alt="local"></p><p>dubbo项目配置：<br>provider<br><img src="/blog.github.io/img/remote_provider.png" alt="remote_provider"><br>consumer<br><img src="/blog.github.io/img/remote_consumer.png" alt="remote_consumer"></p><h3 id="Schema配置"><a href="#Schema配置" class="headerlink" title="Schema配置"></a>Schema配置</h3><table><thead><tr><th>schema</th><th>说明</th></tr></thead><tbody><tr><td>dubbo:service</td><td>服务提供者暴露服务配置</td></tr><tr><td>dubbo:reference</td><td>服务消费者引用服务配置</td></tr><tr><td>dubbo:registry</td><td>注册中心配置</td></tr><tr><td>dubbo:protocol</td><td>服务提供者协议配置</td></tr><tr><td>dubbo:application</td><td>服务消费者引用服务配置</td></tr></tbody></table><h2 id="扩展实现"><a href="#扩展实现" class="headerlink" title="扩展实现"></a>扩展实现</h2><p>例如要实现自定义的拦截器</p><blockquote><p>扩展接口<br>com.alibaba.dubbo.rpc.Filter<br>扩展配置<br>META-INF/dubbo/com.alibaba.dubbo.rpc.Filter：<br>xxx=com.xxx.XxxFilter<br>调用自定义过滤器<br>&lt;dubbo:consumer filter=”xxx”/&gt;</p></blockquote><h2 id="dobbo-admin"><a href="#dobbo-admin" class="headerlink" title="dobbo-admin"></a>dobbo-admin</h2><p>dubbo-admin是服务管理平台，即对注册中心的服务进行管理，因此在启动dubbo-admin之前必须启动注册中心</p><h3 id="安装及运行"><a href="#安装及运行" class="headerlink" title="安装及运行"></a>安装及运行</h3><p>1、下载dubbo-admin源码：<a href="https://github.com/apache/incubator-dubbo-ops" target="_blank" rel="noopener">dubbo-admin</a></p><p>2、到该目录下执行mvn clean package，进行编译</p><p>3、将war包进行解压：jar xvf</p><p>4、将文件夹拷贝到tomcat下运行</p><p>5、成功后可看见如下界面</p><p><img src="/blog.github.io/img/dubbo_admin.png" alt="dubbo_admin"></p>]]></content>
    
    <summary type="html">
    
      Dubbo作为现在比较流行的分布式框架，它的架构体系：服务提供者、服务消费者、注册中心和监控中心组成...
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello, Hexo</title>
    <link href="https://kingking0803.github.io/2018/03/26/Hello-Hexo/"/>
    <id>https://kingking0803.github.io/2018/03/26/Hello-Hexo/</id>
    <published>2018-03-26T13:51:49.000Z</published>
    <updated>2018-03-26T13:56:32.481Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎使用hexo！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎使用hexo！&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
